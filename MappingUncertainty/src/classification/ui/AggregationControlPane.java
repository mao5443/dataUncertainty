/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AggregationControlPane.java
 *
 * Created on Jun 24, 2013, 10:59:49 PM
 */

package classification.ui;

import classification.dataHandler.AggregateCandidate;
import classification.dataHandler.NewEstimateCalculator;
import classification.ui.AggregationCVSelection.UnacceptUnits;
import com.vividsolutions.jts.geom.Geometry;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.math.MathException;
import org.geotools.data.DefaultTransaction;
import org.geotools.data.FeatureSource;
import org.geotools.data.Transaction;
import org.geotools.data.collection.ListFeatureCollection;
import org.geotools.data.shapefile.ShapefileDataStore;
import org.geotools.data.shapefile.ShapefileDataStoreFactory;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.data.simple.SimpleFeatureIterator;
import org.geotools.data.simple.SimpleFeatureSource;
import org.geotools.data.simple.SimpleFeatureStore;
import org.geotools.factory.CommonFactoryFinder;
import org.geotools.feature.FeatureCollection;
import org.geotools.feature.FeatureIterator;
import org.geotools.feature.simple.SimpleFeatureBuilder;
import org.geotools.filter.text.cql2.CQLException;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;
import org.opengis.filter.Filter;
import org.opengis.filter.FilterFactory2;
import org.opengis.filter.identity.FeatureId;


/**
 *
 * @author min
 */
public class AggregationControlPane extends javax.swing.JInternalFrame {
    private Root parentFrame;

//    public Hashtable<Integer, ArrayList<SimpleFeature>> finalMergeList =
//                new Hashtable<Integer, ArrayList<SimpleFeature>>();
    public Hashtable<Integer, AggregateCandidate> finalMergeList =
                new Hashtable<Integer, AggregateCandidate>();
    //record the areal units that have been selected as seed, these units cannot be used any more
    private String[] usedUnit;
    /** Creates new form AggregationControlPane */
    public AggregationControlPane(Root root) {
        initComponents();
        this.parentFrame=root;
        this.setAlignmentX(RIGHT_ALIGNMENT);
        this.setAlignmentY(TOP_ALIGNMENT);
        this.setFocusable(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Seed ID", "Original CV", "Estimated CV", "Selected Candidate"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Aggregate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    public void intializeControlTable(String arrayindexUnaccepctedBoth,
//                            String arrayindexUnacceptedX, String arrayindexUnacceptedY,
//                            int nrow)
//    {
//         DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
//          for(int i =0; i<model.getRowCount();i++)
//          {
//            model.removeRow(0);
//          }
//          model.setRowCount(nrow);
//          this.usedUnit = new String[nrow];
//           if(arrayindexUnaccepctedBoth.length()!=0)
//          {
//            String[] elementArrayindex = arrayindexUnaccepctedBoth.split(";");
//            for(int i=0; i<elementArrayindex.length;i++)
//            {
//                model.setValueAt(parentFrame.attridata.get(i).fileindex, i,0 );
//                model.setValueAt(parentFrame.attridata.get(i).FID, i,1);
//                model.setValueAt(parentFrame.attridata.get(i).cv, i,2);
//            }
//          }
//          if(arrayindexUnacceptedX.length()!=0)
//          {
//            String[] elementArrayindex = arrayindexUnacceptedX.split(";");
//            for(int i=0; i<elementArrayindex.length;i++)
//            {
//                model.setValueAt(parentFrame.attridata.get(i).fileindex, i,0 );
//                model.setValueAt(parentFrame.attridata.get(i).FID, i,1);
//                model.setValueAt(parentFrame.attridata.get(i).cv, i,2);
//               // jTable1.setDefaultRenderer(null, new MyCellRenderer(Color.orange,i));
//
//            }
//          }
//          if(arrayindexUnacceptedY.length()!=0)
//          {
//            String[] elementArrayindex = arrayindexUnacceptedY.split(";");
//            for(int i=0; i<elementArrayindex.length;i++)
//            {
//                model.setValueAt(parentFrame.attridata.get(i).fileindex, i,0 );
//                model.setValueAt(parentFrame.attridata.get(i).FID, i,1);
//                model.setValueAt(parentFrame.attridata.get(i).cv, i,2);
//                //jTable1.setDefaultRenderer(Boolean.class, new MyCellRenderer(Color.BLUE,i));
//            }
//          }
//    }
    
    private ArrayList<UnacceptUnits> sortSmalltoLargeUnacceptedUnits(ArrayList<UnacceptUnits> records){

       Collections.sort(records, new Comparator<UnacceptUnits>(){
         public int compare(UnacceptUnits o1, UnacceptUnits o2) {
            return o1.max_cv<o2.max_cv ? -1:o1.max_cv == o2.max_cv ? 0:1;
        }
       });
        return records;
    }

    public void intializeControlTable(ArrayList<UnacceptUnits> arrayindexUnaccepctedList)
    {
        sortSmalltoLargeUnacceptedUnits(arrayindexUnaccepctedList);

        int nrow= arrayindexUnaccepctedList.size();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
          for(int i =0; i<model.getRowCount();i++)
          {
            model.removeRow(0);
          }
          model.setRowCount(nrow);
      for(int i=0; i<nrow ;i++)
        {
            model.setValueAt(arrayindexUnaccepctedList.get(nrow-1-i).FID, i,0);
            //model.setValueAt(String.format("%1$,.4f",arrayindexUnaccepctedList.get(nrow-1-i).max_cv), i,1);
            String cvs = String.format("%1$,.4f",arrayindexUnaccepctedList.get(nrow-1-i).cv[0])+ "; "+
                 String.format("%1$,.4f",arrayindexUnaccepctedList.get(nrow-1-i).cv[1]);
            model.setValueAt(cvs, i, 1);
        }

          this.usedUnit = new String[nrow];
    }

    private int currentSelectedTableRow = -1;
    

    public void updateSeedColumn(AggregateCandidate selectedOption)
    {
         DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
         CleanPreviousSeed(model); //before reset seed, clear the old ones
         String seedFID = "";
         for(int i =0; i < selectedOption.id.size()-1; i++)
             seedFID = seedFID + selectedOption.id.get(i) + ";";
         seedFID=seedFID+selectedOption.id.get(selectedOption.id.size()-1);
         for(int i=0; i<model.getRowCount(); i++)
         {
             int fid = (Integer)model.getValueAt(i, 0);
             if((";" +seedFID+";").contains(";" + fid + ";"))
             {
                 model.setValueAt(seedFID, i, 3);

                 String newCVs = "";
                 for(int k=0; k<parentFrame.input_data_dimension -1; k++)
                     newCVs = newCVs + String.format("%1$,.4f",selectedOption.newCV[k]*100)+ "; ";
                 newCVs = newCVs + String.format("%1$,.4f",selectedOption.newCV[parentFrame.input_data_dimension -1]*100);

                 model.setValueAt(newCVs, i, 2);
                 this.usedUnit[i] = seedFID;
             }
         }
         //this.finalMergeList.put(currentSelectedTableRow, seed.feature);
         finalMergeList.put(currentSelectedTableRow, selectedOption);
         

    }
    private void CleanPreviousSeed(DefaultTableModel model)
    {
        String currentseed = (String)model.getValueAt(this.currentSelectedTableRow, 3);
        if(currentseed != null)
        {
            for(int i=0; i < this.usedUnit.length; i++)
            {
                if(usedUnit[i] == currentseed)
                {
                    usedUnit[i] = null;
                    model.setValueAt(null, i, 3);
                    finalMergeList.remove(i);
                }
            }
        }
    }

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int row = jTable1.rowAtPoint(evt.getPoint());
        this.currentSelectedTableRow = row;
        //int col = jTable1.columnAtPoint(evt.getPoint());
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        CleanPreviousSeed(model);
        int FID = (Integer)model.getValueAt(row, 0);
        try {
            try {
                highlightInMap(FID);
                parentFrame.aggregationcriteriawin.intializeAggregateCandidate(FID, this.usedUnit);
            } catch (MathException ex) {
                Logger.getLogger(AggregationCVSelection.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (CQLException ex) {
            Logger.getLogger(AggregationCVSelection.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AggregationCVSelection.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("clicked row is: "+row);
    }//GEN-LAST:event_jTable1MouseClicked

    public void highlightInMap(int unitid)
    {
        for(int k=0; k<parentFrame.input_data_dimension; k++)
        {
            Set<FeatureId> IDs = new HashSet<FeatureId>();
            FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2(null);

            String tempid = parentFrame.data_aggregation.layername.get(k)+"."+unitid;
            FeatureId tempfeatureid = (ff.featureId(tempid));
            IDs.add(tempfeatureid);
            parentFrame.aggregationwin.displaySelectedFeatures(IDs,k);
        }
//        Set<FeatureId> IDs = new HashSet<FeatureId>();
//        for(int i=0; i<this.selectedAggreGroup.feature.size(); i++)
//        {
//            IDs.add(this.selectedAggreGroup.feature.get(i).getIdentifier());
//        }
//         parentFrame.aggregationwin.displaySelectedFeatures(IDs,0);

    }

    private SimpleFeature unionGeometry(ArrayList<SimpleFeature> aggreGroup, int datadimension, AggregateCandidate selectedOption)
    {
        //SimpleFeature to Geometry -> Union -> Geometry to SimpleFeature
        ArrayList<Double> oldestimate = new ArrayList<Double>();
        ArrayList<Double> olderror = new ArrayList<Double>();
        //System.out.println("Current aggregation seeds are: -----------------------");
         Geometry all = null;
         for(int i=0; i<aggreGroup.size(); i++)
         {
             String estimateName = parentFrame.data_aggregation.selectedVar_aggregation.get(datadimension);
             oldestimate.add(Double.valueOf(aggreGroup.get(i).getAttribute(estimateName).toString()));
             String errorName = parentFrame.data_aggregation.selectedError_aggregation.get(datadimension);
             olderror.add(Double.valueOf(aggreGroup.get(i).getAttribute(errorName).toString()));

             //System.out.println(aggreGroup.get(i).getID());
             Geometry geometry = (Geometry) aggreGroup.get(i).getAttribute(0);
             if(geometry == null)
                 break;
             if(all == null)
                 all = geometry;
             else
                 all = (Geometry) all.union(geometry);

         }

         SimpleFeatureType ft =
                    (SimpleFeatureType) parentFrame.data_aggregation.source_aggregation.get(datadimension).getSchema();
         /*create new simplefeature with the geometry*/
         SimpleFeatureBuilder featureBuilder = new SimpleFeatureBuilder(ft);
         featureBuilder.add(all);
         
        SimpleFeature mergedFeature = featureBuilder.buildFeature(null);
        
        //update new estimate and error
       // double[] newAttr = NewEstimateCalculator.NewErrorCountData(oldestimate, olderror);
        mergedFeature.setAttribute(parentFrame.data_aggregation.selectedVar_aggregation.get(datadimension), selectedOption.newEstimate[datadimension]);
        mergedFeature.setAttribute(parentFrame.data_aggregation.selectedError_aggregation.get(datadimension), selectedOption.newError[datadimension]);
        mergedFeature.setAttribute("cv", selectedOption.newCV[datadimension]);
 
        return mergedFeature;
    }

    private void displayAggregation(FeatureCollection collection, FeatureSource source, int paneindex)
    {
        parentFrame.aggregationwin.removeAggregatedLayer(paneindex);
        parentFrame.aggregationwin.addLayerToMap(collection, source,
                 parentFrame.data_aggregation.selectedVar_aggregation.get(paneindex),5, paneindex, 2);
        parentFrame.aggregationwin.addLayerToMap(collection, source,
                 parentFrame.data_aggregation.selectedError_aggregation.get(paneindex),5, paneindex, 3);

    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed


        for(int k=0; k<parentFrame.input_data_dimension; k++)
        {
            System.out.println("Output varaible is: "+parentFrame.data_aggregation.layername.get(k));

            List<SimpleFeature> features = new ArrayList<SimpleFeature>();
            String mergeFeatureId = "";

            FeatureCollection collection = parentFrame.data_aggregation.collection_aggregation.get(k);
            SimpleFeatureIterator iterator = (SimpleFeatureIterator) collection.features();
            for (Map.Entry<Integer, AggregateCandidate> entry : finalMergeList.entrySet()) {
                System.out.println("--------------------");
                System.out.println("Seed: "+entry.getValue().orginalid+"; Compactness: "+entry.getValue().compactness+"; Bias: "+entry.getValue().bias[k]+
                                    "; Similarity: "+entry.getValue().themeproximity[k]+"; newCV: "+entry.getValue().newCV[k]);
                
                ArrayList<Integer> id_array = entry.getValue().id;

                Set<FeatureId> IDs = new HashSet<FeatureId>();
                FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2(null);
                for(int i=0; i<id_array.size(); i++)
                {
                    String tempid = parentFrame.data_aggregation.layername.get(k)+"."+id_array.get(i);
                    FeatureId tempfeatureid = (ff.featureId(tempid));
                    IDs.add(tempfeatureid);
                }
                Filter filter = ff.id(IDs);
                try {
                    SimpleFeatureCollection current_collection =
                            (SimpleFeatureCollection) parentFrame.data_aggregation.source_aggregation.get(k).getFeatures(filter);
                    SimpleFeatureIterator current_iter=current_collection.features();
                    ArrayList<SimpleFeature> temp = new ArrayList<SimpleFeature>();
                    while(current_iter.hasNext()){
                        temp.add(current_iter.next());
                    }
                    //merge the current aggregation seed into a new feature and add to new feautre collection list
                    features.add(unionGeometry(temp, k, entry.getValue()));

                    for(int i=0; i<temp.size(); i++)
                    {
                        mergeFeatureId = mergeFeatureId + temp.get(i).getID() + ";";
                    }
                } catch (IOException ex) {
                    Logger.getLogger(AggregationControlPane.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

            while( iterator.hasNext() ){
                SimpleFeature feature = iterator.next();
                String tempid=feature.getID()+";";
                if(!mergeFeatureId.contains(tempid))
                    features.add(feature);
            }


            /*
             *iterate all features in the original file
            */
            String outputFile = "C:\\Users\\Min\\Documents\\"+
                                        parentFrame.data_aggregation.layername.get(k)+"AggregationOutput.shp";
            try {
                // TODO add your handling code here:
                /*
                 * Create a new shapefile,
                Get an output file name and create the new shapefile
                 */
                File newFile = new File(outputFile);
                ShapefileDataStoreFactory dataStoreFactory = new ShapefileDataStoreFactory();
                Map<String, Serializable> params = new HashMap<String, Serializable>();
                params.put("url", newFile.toURI().toURL());
                params.put("create spatial index", Boolean.TRUE);
                ShapefileDataStore newDataStore =
                        (ShapefileDataStore) dataStoreFactory.createNewDataStore(params);
                SimpleFeatureType ft =
                        (SimpleFeatureType) parentFrame.data_aggregation.source_aggregation.get(k).getSchema();
                newDataStore.createSchema(ft);
                /*
                 * Write the features to the shapefile
                 */
                Transaction transaction = new DefaultTransaction("create");
                String typeName = newDataStore.getTypeNames()[0];
                SimpleFeatureSource featureSource = newDataStore.getFeatureSource(typeName);
                if (featureSource instanceof SimpleFeatureStore) {
                    SimpleFeatureStore featureStore = (SimpleFeatureStore) featureSource;
                    /*
                     * SimpleFeatureStore has a method to add features from a
                     * SimpleFeatureCollection object, so we use the ListFeatureCollection
                     * class to wrap our list of features.
                     */
                    SimpleFeatureCollection newcollection = new ListFeatureCollection(ft, features);
                    featureStore.setTransaction(transaction);
                    try {
                        featureStore.addFeatures(newcollection);
                        transaction.commit();
                    } catch (Exception problem) {
                        problem.printStackTrace();
                        transaction.rollback();
                    } finally {
                        transaction.close();
                    }
                    JOptionPane.showMessageDialog(null, "Aggregation Result Created!");

                    //***************************add aggregated data to map panel
                    File tempfile = new File(outputFile);
                    ShapefileDataStore shpDataStore = new ShapefileDataStore(tempfile.toURI().toURL());
                    String[] names = shpDataStore.getTypeNames();
                    String typename = "";
                    for(int i=0; i<names.length;i++)
                         typename = typename + names[i];
                    SimpleFeatureSource tempSource = shpDataStore.getFeatureSource(typename);
                    SimpleFeatureCollection tempCollection = tempSource.getFeatures();
                    displayAggregation(tempCollection, tempSource, k);
                    //**********************************************************
                } else {
                    System.out.println(typeName + " does not support read/write access");
                    //System.exit(1);
                }
            } catch (IOException ex) {
                Logger.getLogger(AggregationControlPane.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
