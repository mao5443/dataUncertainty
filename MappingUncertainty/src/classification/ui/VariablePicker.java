/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VariablePicker.java
 *
 * Created on Oct 25, 2011, 2:54:11 PM
 */

package classification.ui;

import classification.dataHandler.DataReader;
import classification.dataHandler.ProCalculator;
import classification.dataHandler.PublicVariables;
import classification.dataHandler.Utils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import org.apache.commons.math.MathException;
import org.geotools.data.FeatureSource;
import org.geotools.data.simple.SimpleFeatureCollection;

/**
 *
 * @author cisc
 */
public class VariablePicker extends javax.swing.JInternalFrame {
    public String openDataType;
    private DefaultListModel listModel1 = new DefaultListModel();
    private DefaultListModel listModel2 = new DefaultListModel();
    private Root parentFrame;
    private ArrayList<String> variableTypes = new ArrayList();

    /** Creates new form VariablePicker */
    public VariablePicker(Root root) {
        initComponents();
        parentFrame = root;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("Variable Picker");
        setVisible(true);

        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Send selection");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jList2);

        jLabel1.setText("Estimate");

        jLabel2.setText("MOE");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(71, 71, 71))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       String var = (String) jList1.getSelectedValue();
       String error = (String) jList2.getSelectedValue();
       parentFrame.missingValueNumber=0;
        if(this.openDataType.equals("classification"))
        {

            parentFrame.selectedVariable.setSelectedVariable(var);
            parentFrame.selectedVariable.setSelectedError(error);
            Long time1=System.currentTimeMillis();
            parentFrame.attriData = DataReader.transferShpToAttriData(parentFrame, var, error, this.variableTypes.get(jList1.getSelectedIndex()),this.variableTypes.get(jList2.getSelectedIndex()));
            //polygon with missing values (-9999) are sorted at the begining of the data list
            //all the other calculations need to exlude those missing values
            ProCalculator calculator = new ProCalculator();
            try {
                parentFrame.matrix = calculator.calculateProMatrix(parentFrame.attriData, 0, parentFrame.missingValueNumber);

                /*
                 *
                 */
                /*code added for PG paper, not used in the tool - get descriptive information of cv for each polygon*/
                int unitnumber = parentFrame.attriData.size();
                double meanest=0,meanmoe=0;
                for(int i=parentFrame.missingValueNumber; i<parentFrame.attriData.size();i++)
                {
                    meanest= meanest+parentFrame.attriData.get(i).getEstimate().get(0);
                    meanmoe = meanmoe + parentFrame.attriData.get(i).getMoe().get(0);
                }
                meanest=meanest/(unitnumber-parentFrame.missingValueNumber);
                meanmoe=meanmoe/(unitnumber-parentFrame.missingValueNumber);

                ArrayList<Double> cvlist = calculator.getCV(parentFrame.attriData, 0, parentFrame.missingValueNumber);
                Utils.sortSmalltoLargeDouble(cvlist);
                double mincv = cvlist.get(0);
                double maxcv = cvlist.get(cvlist.size()-1);
                double range = maxcv-mincv;
                double mediancv = cvlist.get(cvlist.size()/2);
                double mean, sd, variance, sum=0;
                for(int i=0; i<cvlist.size(); i++)
                {
                    sum = cvlist.get(i)+sum;
                }
                mean=sum/cvlist.size();
                sum=0;
                for(int i=0; i<cvlist.size(); i++)
                {
                    sum = Math.pow((cvlist.get(i)-mean),2)+sum;
                }
                variance=sum/(cvlist.size()-1);
                sd=Math.sqrt(variance);
                System.out.println("total number of unit: "+unitnumber+" mean of estimate: "+meanest+" mean of moe: "+meanmoe+" min of CV: "+mincv+" max of CV: "+maxcv+" mean of CV: "+mean+" SD of CV: "+sd);

                /*******************************/
                /*
                 * 
                 */
            } catch (MathException ex) {
                Logger.getLogger(VariablePicker.class.getName()).log(Level.SEVERE, null, ex);
            }
            parentFrame.selectedVariable.setintersectThreshold(ProCalculator.getIntersectThreshold(parentFrame.attriData, 0));
            Long time2 = System.currentTimeMillis();
            System.out.println(time2-time1);
        }else if(this.openDataType.equals("aggregation_main"))
        {
            parentFrame.data_aggregation.selectedVar_aggregation.add(var);
            parentFrame.data_aggregation.selectedError_aggregation.add(error);
            int index= parentFrame.data_aggregation.selectedVar_aggregation.size()-1;
            //parentFrame.aggregationwin.updateDataTable(index, "aggregation_main");
            //FeatureSource temp = parentFrame.data_aggregation.source_aggregation.get(index);
            //String tempName = temp.getName().toString();
           // String filename = parentFrame.data_aggregation.source_aggregation.get(index).getName().toString().split(":")[2];
            String filename = parentFrame.data_aggregation.source_aggregation.get(index).getName().toString();
            parentFrame.data_aggregation.layername.add(filename);
            parentFrame.data_aggregation.selectedVar_aggregationType=this.variableTypes.get(jList1.getSelectedIndex());
            try {
                parentFrame.aggregationwin.getCollectionCV(index, filename, var, error, this.variableTypes.get(jList1.getSelectedIndex()), this.variableTypes.get(jList2.getSelectedIndex()));
            } catch (IOException ex) {
                Logger.getLogger(VariablePicker.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                //if index ==0  only intialize matrix at the first time of reading data
                parentFrame.aggregationcriteriawin.initializeSpatialWeightMatrix();
            } catch (IOException ex) {
                Logger.getLogger(VariablePicker.class.getName()).log(Level.SEVERE, null, ex);
            }

            //display feature  in unclassfied map
            parentFrame.aggregationwin.generateMap(parentFrame.data_aggregation.collection_aggregation.get(index),
                                                   parentFrame.data_aggregation.source_aggregation.get(index),
                                                   var, 5,index);
            parentFrame.aggregationwin.addLayerToMap(parentFrame.data_aggregation.collection_aggregation.get(index),
                                                     parentFrame.data_aggregation.source_aggregation.get(index),
                                                     error,5,index, 1);

        }if(this.openDataType.equals("aggregation_auxi"))
        {
             parentFrame.data_aggregation.selectedVar_auxi.add(var);
            parentFrame.data_aggregation.selectedError_auxi.add(error);
            int index= parentFrame.data_aggregation.selectedVar_auxi.size()-1;
  

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    
    public void setVariableList(String name, String type)
    {
        listModel1.addElement(name);
        jList1.setModel(listModel2);
        listModel2.addElement(name);
        jList2.setModel(listModel2);
        this.variableTypes.add(type);
    }

    public void clearVariables()
    {
        listModel1.clear();
        jList1.setModel(listModel1);
        listModel2.clear();
        jList2.setModel(listModel2);
        this.variableTypes.clear();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

}
