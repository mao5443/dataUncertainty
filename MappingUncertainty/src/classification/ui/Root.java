/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Root.java
 *
 * Created on Oct 25, 2011, 2:59:38 PM
 */

package classification.ui;

import classification.dataHandler.AggregationAttributes;
import classification.dataHandler.DataReader;
import classification.dataHandler.DataTable;
import classification.dataHandler.ImageFilter;
import classification.dataHandler.ProbabilityMatrix;
import classification.dataHandler.PublicVariableForAggregation;
import classification.dataHandler.ShpFilter;
import classification.dataHandler.PublicVariables;
import classification.dataHandler.SepSdClassnum;
//import com.sun.image.codec.jpeg.JPEGCodec;
//import com.sun.image.codec.jpeg.JPEGEncodeParam;
//import com.sun.image.codec.jpeg.JPEGImageEncoder;
//import com.sun.imageio.plugins.jpeg.JPEGImageWriter;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.imageio.ImageTypeSpecifier;
import javax.imageio.metadata.IIOMetadata;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.apache.commons.math.MathException;
import org.geotools.data.FeatureSource;
import org.geotools.data.simple.SimpleFeatureCollection;
import javax.imageio.plugins.jpeg.JPEGImageWriteParam;
import org.geotools.data.simple.SimpleFeatureSource;
import org.w3c.dom.Element;

/**
 *
 * @author cisc
 */
public class Root extends javax.swing.JFrame {
    /*
     * variables used by classification procedure
     */
    private String filepath;
    public String filename;
    public FeatureSource source;
    public SimpleFeatureCollection collection;
    private ArrayList<String> attributeNames;
    private ArrayList<String> attributeTypes;
    
    public String geometryType;
    public static PublicVariables selectedVariable = new PublicVariables();
   

    public ArrayList<DataTable> attriData = new ArrayList<DataTable>();
    public int missingValueNumber = 0;
    public ProbabilityMatrix matrix = new ProbabilityMatrix();
    public ArrayList<SepSdClassnum> sepSdClassnum = new ArrayList<SepSdClassnum>(); //for draw starplot
    /*
     *
     */

     /*
      * windows
      */
    private VariablePicker variPicker = new VariablePicker(this);
    public BarChart barchart = new BarChart(this);
    public Map map = new Map(this);
    public StarPlot statplot = new StarPlot(this);
    public ParallelPlot paraplot = new ParallelPlot(this);
    public ClassEvaluation clsevaluation = new ClassEvaluation(this);
    public AggregationControlPane aggregationcontrolwin = new AggregationControlPane(this);
    public AggregationMap aggregationwin = new AggregationMap(this);
    public AggregationCVSelection aggregationassistantwin = new AggregationCVSelection(this);
    public AggregationCriteria aggregationcriteriawin = new AggregationCriteria(this);
    

    /*
     * variables used by aggregation procedure
     */
    public PublicVariableForAggregation data_aggregation = new PublicVariableForAggregation();
     //attridata to store old and new attributes of aggregation main layers
     //public ArrayList<AggregationAttributes> attridata = new ArrayList<AggregationAttributes>();
     public ArrayList<ArrayList<AggregationAttributes>> attridata =
                new ArrayList<ArrayList<AggregationAttributes>>();
     public int DATA_DIMENSION = 2;
     public int input_data_dimension = 0;

     /*
      *
      */
    /** Creates new form Root */
    public Root() {
        initComponents();
        Container contentPane = this.getContentPane();
        contentPane.add(this.variPicker);
        contentPane.add(this.barchart);
        contentPane.add(this.map);
        contentPane.add(this.statplot);
        contentPane.add(this.paraplot);
        contentPane.add(this.clsevaluation);
        contentPane.add(this.aggregationcontrolwin);
        contentPane.add(this.aggregationwin);
        contentPane.add(this.aggregationassistantwin);
        contentPane.add(this.aggregationcriteriawin);
        this.filepath = "";

        for(int i =0; i < DATA_DIMENSION; i++)
        {
            ArrayList<AggregationAttributes> elem = new ArrayList<AggregationAttributes>();
            attridata.add(elem);
        }


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem4 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem5 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem6 = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jCheckBoxMenuItem7 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem8 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem9 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem10 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("File");

        jMenuItem1.setText("Open Shp...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setLabel("Save As...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem4.setText("Open Shp (Aggregation)");
        jMenuItem4.setToolTipText("");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Add auxiliary data");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Classification Window");

        jCheckBoxMenuItem1.setText("Variable Picker");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setText("Chart");
        jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem2);

        jCheckBoxMenuItem3.setText("Map");
        jCheckBoxMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem3);

        jCheckBoxMenuItem4.setSelected(true);
        jCheckBoxMenuItem4.setText("Star Plot");
        jCheckBoxMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem4);

        jCheckBoxMenuItem5.setSelected(true);
        jCheckBoxMenuItem5.setLabel("Parallel Plot");
        jCheckBoxMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem5);

        jCheckBoxMenuItem6.setText("Evaluation");
        jCheckBoxMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem6);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Aggregation Window");

        jCheckBoxMenuItem7.setSelected(true);
        jCheckBoxMenuItem7.setText("Map");
        jCheckBoxMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jCheckBoxMenuItem7);

        jCheckBoxMenuItem8.setSelected(true);
        jCheckBoxMenuItem8.setText("Unit Picker");
        jCheckBoxMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jCheckBoxMenuItem8);

        jCheckBoxMenuItem9.setSelected(true);
        jCheckBoxMenuItem9.setText("Criteria");
        jCheckBoxMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jCheckBoxMenuItem9);

        jCheckBoxMenuItem10.setSelected(true);
        jCheckBoxMenuItem10.setText("Control Table");
        jCheckBoxMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jCheckBoxMenuItem10);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1194, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 643, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void openFileDialog(String openType)
    {
        jFileChooser1.removeChoosableFileFilter(jFileChooser1.getChoosableFileFilters()[0]);
        jFileChooser1.addChoosableFileFilter(new ShpFilter());
        jFileChooser1.setAcceptAllFileFilterUsed(false);

        int returnVal = jFileChooser1.showOpenDialog(Root.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            //This is where a real application would open the file.
            String path = file.getPath();
            this.filename = file.getName();
            this.filepath = path;
            try {
                this.OpenFile(openType);


            } catch (MathException ex) {
                //Logger.getLogger(ClassesSliderDemo.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                //Logger.getLogger(ClassesSliderDemo.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println();
        }
    }
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        openFileDialog("classification");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        // TODO add your handling code here:
        this.variPicker.setVisible(true);
        
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jCheckBoxMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
        // TODO add your handling code here:
        this.barchart.setVisible(true);
    }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed

    private void jCheckBoxMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem3ActionPerformed
        
            // TODO add your handling code here:
           // MapContext map = new MapContext();
           // this.map.displayShapefile(map);
           
            this.map.setVisible(true);
        
    }//GEN-LAST:event_jCheckBoxMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        //jFileChooser1.addChoosableFileFilter(new ShpFilter());
        //jFileChooser1.setAcceptAllFileFilterUsed(false);
        jFileChooser1.removeChoosableFileFilter(jFileChooser1.getChoosableFileFilters()[0]);
        jFileChooser1.addChoosableFileFilter(new ImageFilter());
        jFileChooser1.setSelectedFile(new File("default.jpg"));
        int returnVal = jFileChooser1.showSaveDialog(Root.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File mapimage = jFileChooser1.getSelectedFile();
            //This is where a real application would open the file.
            String path = mapimage.getPath();
            String filename = mapimage.getName();

            //this.SaveMap(path);

            JPanel mapPanle = this.map.getMapPanel();
             Dimension imageSize = mapPanle.getSize();
             BufferedImage image = new BufferedImage(imageSize.width,
                                imageSize.height, BufferedImage.TYPE_3BYTE_BGR);
        Graphics2D g = image.createGraphics();
        mapPanle.paint(g);
        g.dispose();

                try {
                          if(!mapimage.exists()){
                                     //ImageIO.write(image, "png", mapimage);
                              
                                      saveMap(image, mapimage);
                                    
//                                    jfif.setAttribute("Xdensity", Integer.toString(600));
//                                    jfif.setAttribute("Ydensity", Integer.toString(600));
//                                    jfif.setAttribute("resUnits", "1"); // density is dots per inch
//
//                            // Write and clean up
//                                    imageWriter.write(data, new IIOImage(image, null, null), jpegParams);
//                                    ios.close();
//                                    imageWriter.dispose();


//                                     ImageWriter writer = ImageIO.getImageWritersBySuffix("png").next();
//                                       ImageWriteParam writeParam = writer.getDefaultWriteParam();
//                                       ImageTypeSpecifier typeSpecifier = ImageTypeSpecifier.createFromBufferedImageType(BufferedImage.TYPE_INT_RGB);
//                                       IIOMetadata metadata = writer.getDefaultImageMetadata(typeSpecifier, writeParam);
//                                       if (metadata.isReadOnly() || !metadata.isStandardMetadataFormatSupported()) {
//                                          //continue;
//                                       }
//                                       setDPI(metadata);
//
//                                       final ImageOutputStream stream = ImageIO.createImageOutputStream(mapimage);
//                                       try {
//                                          writer.setOutput(stream);
//                                          writer.write(metadata, new IIOImage(image, null, metadata), writeParam);
//                                       } finally {
//                                          stream.close();
//                                       }




                                     JOptionPane notice=new JOptionPane ();
                                    notice.showMessageDialog(null, "Congratulations, image is saved successfully!","Saved Successfully",JOptionPane.INFORMATION_MESSAGE);
                                 }else{
                                     int returnValue=0;
                                     JOptionPane notice=new JOptionPane ();
                                     returnValue=notice.showConfirmDialog(jFileChooser1,  "File "+mapimage.getName()+" exists, replaced?", "Saving File",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                                     if(returnValue==JOptionPane.YES_OPTION){
                                         //ImageIO.write(image, "png", mapimage);
                                         saveMap(image, mapimage);
                                         //JOptionPane notice=new JOptionPane ();
                                        notice.showMessageDialog(null, "Congratulations, image is saved successfully!","Saved Successfully",JOptionPane.INFORMATION_MESSAGE);
                                     }else{
                                         jMenuItem2ActionPerformed(evt);
                                     }
                                 }

                            } catch (IOException e1) {
                                e1.printStackTrace();
                            }

        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jCheckBoxMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem4ActionPerformed
        // TODO add your handling code here:
        //this.statplot.addPlotPanel();
        this.statplot.setVisible(true);

    }//GEN-LAST:event_jCheckBoxMenuItem4ActionPerformed

    private void jCheckBoxMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem5ActionPerformed
        // TODO add your handling code here:
        this.paraplot.setVisible(true);
    }//GEN-LAST:event_jCheckBoxMenuItem5ActionPerformed

    private void jCheckBoxMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem6ActionPerformed
        // TODO add your handling code here:
        this.clsevaluation.setVisible(true);
    }//GEN-LAST:event_jCheckBoxMenuItem6ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        openFileDialog("aggregation_main");
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        openFileDialog("aggregation_auxi");
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jCheckBoxMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem7ActionPerformed
        // TODO add your handling code here:
        this.aggregationwin.setVisible(true);
    }//GEN-LAST:event_jCheckBoxMenuItem7ActionPerformed

    private void jCheckBoxMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem8ActionPerformed
        // TODO add your handling code here:
        this.aggregationassistantwin.setVisible(true);
    }//GEN-LAST:event_jCheckBoxMenuItem8ActionPerformed

    private void jCheckBoxMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem9ActionPerformed
        // TODO add your handling code here:
        this.aggregationcriteriawin.setVisible(true);
    }//GEN-LAST:event_jCheckBoxMenuItem9ActionPerformed

    private void jCheckBoxMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem10ActionPerformed
        // TODO add your handling code here:
        this.aggregationcontrolwin.setVisible(true);
    }//GEN-LAST:event_jCheckBoxMenuItem10ActionPerformed

//         private void setDPI(IIOMetadata metadata) throws IIOInvalidTreeException {
//
//        // for PMG, it's dots per millimeter
//        double dotsPerMilli = 1.0 * 600 / 10 / INCH_2_CM;  //600 is dpi
//
//        IIOMetadataNode horiz = new IIOMetadataNode("HorizontalPixelSize");
//        horiz.setAttribute("value", Double.toString(dotsPerMilli));
//
//        IIOMetadataNode vert = new IIOMetadataNode("VerticalPixelSize");
//        vert.setAttribute("value", Double.toString(dotsPerMilli));
//
//        IIOMetadataNode dim = new IIOMetadataNode("Dimension");
//        dim.appendChild(horiz);
//        dim.appendChild(vert);
//
//        IIOMetadataNode root = new IIOMetadataNode("javax_imageio_1.0");
//        root.appendChild(dim);
//
//        metadata.mergeTree("javax_imageio_1.0", root);
//     }

    private void saveMap(BufferedImage image, File mapimage) throws IOException
    {

//        JPEGImageWriter imageWriter = (JPEGImageWriter) ImageIO.getImageWritersBySuffix("jpeg").next();
//        ImageOutputStream ios = ImageIO.createImageOutputStream(mapimage);
//        imageWriter.setOutput(ios);
//
//    //                                    // Compression
//        JPEGImageWriteParam jpegParams = (JPEGImageWriteParam) imageWriter.getDefaultWriteParam();
//        jpegParams.setCompressionMode(JPEGImageWriteParam.MODE_EXPLICIT);
//        jpegParams.setCompressionQuality(1.0f);
//
//        // Metadata (dpi)
//        IIOMetadata data = imageWriter.getDefaultImageMetadata(new ImageTypeSpecifier(image), jpegParams);
//        Element tree = (Element)data.getAsTree("javax_imageio_jpeg_image_1.0");
//        Element jfif = (Element)tree.getElementsByTagName("app0JFIF").item(0);
//
//      // BufferedImage thumb =  (BufferedImage) image.getScaledInstance(600,-1, BufferedImage.SCALE_SMOOTH);
//
//        FileOutputStream fos = new FileOutputStream(mapimage);
//        JPEGImageEncoder jpegEncoder = JPEGCodec.createJPEGEncoder(fos);
//        JPEGEncodeParam jpegEncodeParam = jpegEncoder.getDefaultJPEGEncodeParam(image);
//        jpegEncodeParam.setDensityUnit(JPEGEncodeParam.DENSITY_UNIT_DOTS_INCH);
//        jpegEncodeParam.setXDensity(600);
//        jpegEncodeParam.setYDensity(600);
//        jpegEncoder.encode(image, jpegEncodeParam);
//        fos.close();
    }
     private void OpenFile(String openType) throws MathException, IOException
    {
        if(openType == "classification")
        {
            DataReader reader = new DataReader(filepath);
            reader.ShpReader();
            this.attributeNames = reader.getAttributeNames();
            this.attributeTypes = reader.getAttributeTypes();
            this.collection = reader.getCollection();
            this.source = reader.getSource();
            this.geometryType = reader.getGeometry();

            this.variPicker.clearVariables();
            
            for (int i = 0; i < this.attributeNames.size(); i++)
            {
                if(this.attributeTypes.get(i) != "com.vividsolutions.jts.geom.MultiPolygon")
                {
                    if(this.attributeTypes.get(i) != "java.lang.String")
                    {
                        this.variPicker.setVariableList(this.attributeNames.get(i), this.attributeTypes.get(i));
                        this.variPicker.openDataType="classification";
                    }
                }
            }
        }else if(openType == "aggregation_main")
        {
            DataReader reader = new DataReader(filepath);
            reader.ShpReader();
            this.attributeNames = reader.getAttributeNames();
            this.attributeTypes = reader.getAttributeTypes();
            this.data_aggregation.collection_aggregation.add(reader.getCollection());
            this.data_aggregation.source_aggregation.add(reader.getSource());
            //System.out.println(this.geometryType = reader.getGeometry());

            this.variPicker.clearVariables();
            this.variPicker.openDataType="aggregation_main";

            for (int i = 0; i < this.attributeNames.size(); i++)
            {
                if(this.attributeTypes.get(i) != "com.vividsolutions.jts.geom.MultiPolygon")
                {
                    if(this.attributeTypes.get(i) != "java.lang.String")
                    {
                        this.variPicker.setVariableList(this.attributeNames.get(i), this.attributeTypes.get(i));
                        
                    }
                }
            }
            input_data_dimension++;
        }else if(openType == "aggregation_auxi")
        {
            SimpleFeatureSource fs = DataReader.ShpReaderAuxi(filepath);
            data_aggregation.source_auxi.add(fs);
            data_aggregation.collection_auxi.add(fs.getFeatures());

        }


     }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Root().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem10;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem4;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem5;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem6;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem7;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem8;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem9;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    // End of variables declaration//GEN-END:variables

}
